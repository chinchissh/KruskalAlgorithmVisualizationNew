using KruskalAlgorithmVisualizationNew;
using System;
using System.Windows.Forms;

namespace KruskalAlgorithmVisualization
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}


/*Данный код реализует простой графический интерфейс с использованием Windows Forms. 
Приложение позволяет генерировать случайный граф с заданным количеством узлов и визуализировать его с помощью 
алгоритма Краскала для построения минимального остовного дерева.

Как работает приложение:
1. При запуске приложения отображается окно с кнопкой "Generate Graph" и текстовым полем "Number of Nodes".
2. Пользователь указывает желаемое количество узлов в текстовом поле "Number of Nodes".
3. Пользователь нажимает кнопку "Generate Graph".
4. По нажатию кнопки вызывается обработчик события `GenerateGraphButton_Click`.
5. В обработчике события генерируется случайный граф с указанным количеством узлов. Узлы представлены в виде точек на плоскости, а ребра представлены в виде пар точек.
6. Генерируются все возможные ребра между узлами графа.
7. Ребра сортируются по возрастанию длины.
8. Применяется алгоритм Краскала, который выбирает ребра в порядке возрастания длины и добавляет их в минимальное остовное дерево, если они не образуют цикл с уже добавленными ребрами.
9. Полученное минимальное остовное дерево сохраняется в отдельном списке.
10. Вызывается метод перерисовки (`graphPictureBox.Invalidate()`), который обновляет PictureBox контрол.
11. В обработчике события `GraphPictureBox_Paint` выполняется отрисовка графа на PictureBox контроле.
12. Сначала отрисовываются все ребра исходного графа серым цветом.
13. Затем отрисовываются ребра минимального остовного дерева красным цветом.
14. Наконец, отрисовываются узлы графа в виде черных окружностей.
15. После отрисовки графа окно приложения отображает визуализацию сгенерированного графа и его минимального остовного дерева.

Таким образом, пользователь может легко взаимодействовать с приложением, генерировать 
случайные графы и наглядно видеть результат применения алгоритма Краскала для построения минимального остовного дерева.*/